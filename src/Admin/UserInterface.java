/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Admin;

import user.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.sql.ResultSet;
import javax.swing.JFrame;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import java.util.Date;
import java.text.SimpleDateFormat;

/**
 *
 * @author BEDI
 */
public class UserInterface extends javax.swing.JFrame {
    Vector data=new Vector();
    Thread t;
    citythread frame;
    /**
     * Creates new form UserInterface
     */
    public UserInterface() {
        initComponents();
        combobox();
        frame=new citythread();
    }
    public void combobox()
    {
    try
    {
        Class.forName("com.mysql.jdbc.Driver");
        Connection con=DriverManager.getConnection("jdbc:mysql://localhost/cabservice", "root", "");
        Statement stat=con.createStatement();
        ResultSet r=stat.executeQuery("SELECT * FROM location");
        while(r.next())
        {
            source.addItem(r.getString("name"));
            destination.addItem(r.getString("name"));
        }
    }catch(Exception e)
    {
        System.out.println(e);
    }
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        user = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        source = new javax.swing.JComboBox();
        destination = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        type = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        doj = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        tos = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        appcab = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("User Interface");

        jLayeredPane1.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));

        user.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        user.setPreferredSize(new java.awt.Dimension(2147483647, 2147483647));

        jLabel1.setText("Travelling Details");

        jLabel2.setText("Source");

        jLabel3.setText("Destination");

        source.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                sourceItemStateChanged(evt);
            }
        });

        jLabel4.setText("Type");

        type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ac", "Non-Ac" }));

        jLabel5.setText("Date of Journey");

        doj.setText("Date");

        jButton2.setText("Show Availability");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jLabel7.setText("Type of Service");

        tos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Single", "Shared" }));

        jLabel6.setText("Cab ID:");

        appcab.setFocusable(false);

        javax.swing.GroupLayout userLayout = new javax.swing.GroupLayout(user);
        user.setLayout(userLayout);
        userLayout.setHorizontalGroup(
            userLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userLayout.createSequentialGroup()
                .addGroup(userLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(userLayout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addGroup(userLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(userLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(145, 145, 145))
                            .addGroup(userLayout.createSequentialGroup()
                                .addGroup(userLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5)
                                    .addGroup(userLayout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                                        .addGroup(userLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(source, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(29, 29, 29)))
                                .addGap(27, 27, 27)))
                        .addGroup(userLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(userLayout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addGroup(userLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel3))
                                .addGap(38, 38, 38)
                                .addGroup(userLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(destination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(userLayout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(doj, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(userLayout.createSequentialGroup()
                        .addGap(259, 259, 259)
                        .addComponent(jLabel1))
                    .addGroup(userLayout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(userLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(appcab, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(93, Short.MAX_VALUE))
        );
        userLayout.setVerticalGroup(
            userLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addGroup(userLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(source, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(destination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(userLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel4)
                    .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60)
                .addGroup(userLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(doj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(69, 69, 69)
                .addComponent(jButton2)
                .addGap(16, 16, 16)
                .addGroup(userLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(appcab, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40))
        );

        user.setBounds(0, 10, 620, 360);
        jLayeredPane1.add(user, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        //Date added to add time checking format and other checks(AC/NON-AC);
        path p=new path(tos.getSelectedItem().toString(),type.getSelectedItem().toString());
        Date d=new Date();
        SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss");
        String date=ft.format(d);
        if(Integer.parseInt(doj.getText().substring(0,4))<Integer.parseInt(date.substring(0,4))||Integer.parseInt(doj.getText().substring(5,7))<Integer.parseInt(date.substring(5,7))||Integer.parseInt(doj.getText().substring(8,10))<Integer.parseInt(date.substring(8,10)))
        {
            JOptionPane.showMessageDialog(null, "Check Date");
        }
        else
        {
            String cabid="";
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con=DriverManager.getConnection("jdbc:mysql://localhost/cabservice", "root", "");
            Statement stat=con.createStatement();
            ResultSet r=stat.executeQuery("SELECT * FROM location WHERE name='"+source.getSelectedItem().toString()+"'");
            if(r.next()) {
                p.shortest((r.getString("x")+","+r.getString("y")));
                JOptionPane.showMessageDialog(null, "Please wait  :"+(int)p.totaldist/40+" Minutes");
                int oldx=0;
                int oldy=0;
                if(p.links>0)
                {
                oldx=Integer.parseInt(p.minpath[p.links-1].substring(0, p.minpath[p.links-1].indexOf(",")))+12;
                oldy=Integer.parseInt(p.minpath[p.links-1].substring(p.minpath[p.links-1].indexOf(",")+1))+20;
                }
                else
                {
                oldx=Integer.parseInt(p.minpath[0].substring(0, p.minpath[0].indexOf(",")))+12;
                oldy=Integer.parseInt(p.minpath[0].substring(p.minpath[0].indexOf(",")+1))+20;
                }
                ResultSet rid=stat.executeQuery("SELECT id FROM cab_details WHERE current='"+(oldx+","+oldy)+"'");
                if(rid.next())
                cabid=rid.getString("id");
                appcab.setText(cabid);
                for(int i=p.links-1;i>0;i--) {
                    try {
                        Statement stat1=con.createStatement();
                        int newx=Integer.parseInt(p.minpath[i-1].substring(0, p.minpath[i-1].indexOf(",")))+12;
                        int newy=Integer.parseInt(p.minpath[i-1].substring(p.minpath[i-1].indexOf(",")+1))+20;
                        stat1.executeUpdate("UPDATE cab_details SET current='"+(newx+","+newy)+"' WHERE id='"+cabid+"'");
                        frame.run();
                        Thread.sleep(1000);
                    } catch(Exception e) {
                        System.out.println();
                    }
                }
            }
        } catch(Exception e) {
            System.out.println(e);
        }
            String sourcecord="";
            String destinationcord="";
            try
            {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con=DriverManager.getConnection("jdbc:mysql://localhost/cabservice", "root", "");
            Statement stat=con.createStatement();
            ResultSet rsource=stat.executeQuery("SELECT * FROM location WHERE name='"+source.getSelectedItem().toString()+"'");
            if(rsource.next())
            {
                sourcecord=rsource.getString("x")+","+rsource.getString("y");
            }
            rsource=stat.executeQuery("SELECT * FROM location WHERE name='"+destination.getSelectedItem().toString()+"'");
            if(rsource.next())
            {
                destinationcord=rsource.getString("x")+","+rsource.getString("y");
            }
            travel tv=new travel(tos.getSelectedItem().toString(),type.getSelectedItem().toString(),sourcecord);
            tv.shortest(destinationcord);
            int oldx;
            int oldy;
                if(tv.links>0)
                {
                oldx=Integer.parseInt(tv.minpath[tv.links-1].substring(0, tv.minpath[tv.links-1].indexOf(",")))+12;
                oldy=Integer.parseInt(tv.minpath[tv.links-1].substring(tv.minpath[tv.links-1].indexOf(",")+1))+20;
                }
                else
                {
                oldx=Integer.parseInt(tv.minpath[0].substring(0, tv.minpath[0].indexOf(",")))+12;
                oldy=Integer.parseInt(tv.minpath[0].substring(tv.minpath[0].indexOf(",")+1))+20;
                }
                ResultSet rid=stat.executeQuery("SELECT id FROM cab_details WHERE current='"+(oldx+","+oldy)+"'");
                for(int i=tv.links-1;i>0;i--) {
                    try {
                        Statement stat1=con.createStatement();
                        int newx=Integer.parseInt(tv.minpath[i-1].substring(0, tv.minpath[i-1].indexOf(",")))+12;
                        int newy=Integer.parseInt(tv.minpath[i-1].substring(tv.minpath[i-1].indexOf(",")+1))+20;
                        stat1.executeUpdate("UPDATE cab_details SET current='"+(newx+","+newy)+"' WHERE id='"+cabid+"'");
                        frame.run();
                        Thread.sleep(1000);
                    } catch(Exception e) {
                        System.out.println();
                    }
                }
                    int fare=0;
                try
                {
                    Statement stat2=con.createStatement();
                    ResultSet r2=stat2.executeQuery("SELECT * FROM cab_details WHERE id='"+cabid+"'");
                    if(r2.next())
                    {
                        fare=Integer.parseInt(cabid);
                    }
                }
                catch(Exception e)
                {
                    System.out.println(e);
                }
            JOptionPane.showMessageDialog(null, "Approx: time of travel "+(int)tv.totaldist/40+" Minutes\n"+"Total Fare: "+(int)tv.totaldist*fare);
            }catch(Exception e)
            {
                System.out.println(e);
            }
        }
}//GEN-LAST:event_jButton2MouseClicked

    private void sourceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_sourceItemStateChanged
        // TODO add your handling code here:
        destination.removeAllItems();
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con=DriverManager.getConnection("jdbc:mysql://localhost/cabservice", "root", "");
            Statement stat=con.createStatement();
            ResultSet r=stat.executeQuery("SELECT * FROM location WHERE name<>'"+source.getSelectedItem()+"'");
            while(r.next()) {
                destination.addItem(r.getString("name"));
            }
        }catch(Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_sourceItemStateChanged
    public  void table(String id)
        {
            try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con=DriverManager.getConnection("jdbc:mysql://localhost/cabservice", "root", "");
            Statement stat=con.createStatement();
            ResultSet r=stat.executeQuery("SELECT * FROM cab_details ORDER BY id DESC");
            while(r.next())
            {
                data=new Vector();
                data.addElement(r.getString("id"));
                data.addElement(r.getString("source"));
                data.addElement(r.getString("destination"));
                data.addElement(r.getString("current"));
                data.addElement(r.getString("type"));
                data.addElement(r.getString("fare"));
                data.addElement(r.getString("speed"));
                data.addElement(r.getString("maintainance"));
                data.addElement(r.getString("tos"));
                System.out.println(data);
            }
        }catch(Exception e) {
            System.out.println(e);
        }
        }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField appcab;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox destination;
    private javax.swing.JTextField doj;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JComboBox source;
    private javax.swing.JComboBox tos;
    private javax.swing.JComboBox type;
    private javax.swing.JPanel user;
    // End of variables declaration//GEN-END:variables
}
